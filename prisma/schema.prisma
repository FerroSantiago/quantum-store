generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  cuit      String
  email     String     @unique
  name      String?
  password  String
  role      Role       @default(USER)
  status    UserStatus @default(PENDING)
  orders    Order[]
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  description String
  image       String
  category    String
  featured    Boolean     @default(false)
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Order {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus  @default(PENDING)
  notes       String?
  payments    Payment[]
  orderEvents OrderEvent[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  price     Float
}

model OrderEvent {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  order     Order       @relation(fields: [orderId], references: [id])
  orderId   String      @db.ObjectId
  status    OrderStatus
  note      String?
  createdBy String      @db.ObjectId
  createdAt DateTime    @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

model Payment {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  order      Order         @relation(fields: [orderId], references: [id])
  orderId    String        @db.ObjectId
  status     PaymentStatus @default(PENDING)
  amountPaid Float
  receiptURL String?
  //preference_id       String?
  //payment_id          String?       Eliminado por mercadopago
  //merchant_order_id   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  PARTIALLY_PAID
  COMPLETED
  REJECTED
}
